{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Tilesheet-water.png","webpack:///./src/Tilesheet-water.tsx","webpack:///./src/game.js","webpack:///./src/index.js","webpack:///./src/input.js","webpack:///./src/player.js","webpack:///./src/wood_tileset.png","webpack:///./src/wood_tileset.tsx"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,kBAAkB,WAAW,KAAK,kIAAkI,WAAW,KAAK,6DAA6D,G;;;;;;;;;;;;ACAjP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4B;AAC5B;AAC6C;AACK;AACD;AACK;;AAEtD;AACA;AACA;AACA;AACe;AACf;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,yBAAyB,8CAAK;AAC9B;;AAEA;AACA,uBAAuB,mBAAO,CAAC,kCAAY;AAC3C;AACA,mBAAmB,wDAAgB;AACnC;AACA,oBAAoB,2DAAiB;AACrC;AACA,yBAAyB,wDAAW,EAAE,2DAAY;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gCAAgC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,oCAAoC;AACpC;;AAEA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;ACzJA;AAAA;AAAA;AAA0B;AACI;;AAE9B;AACA,eAAe,6CAAI;;AAEnB;AACA,mBAAmB,+CAAM;;AAEzB;AACA;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,eAAe,KAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,eAAe,KAAK;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,OAAO;AACrB,eAAe,KAAK;AACpB;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AACA;AACA;AACe;AACf;AACA;AACA,cAAc,MAAM;AACpB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,MAAM;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB,cAAc,UAAU;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;ACtCA,iBAAiB,qBAAuB,0C;;;;;;;;;;;ACAxC,kBAAkB,WAAW,KAAK,iIAAiI,WAAW,KAAK,0DAA0D,G","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","module.exports = __webpack_public_path__ + \"2f7d3cea0d7b035283b9bc629fb6138d.png\";","module.exports = {\"tileset\":{\"$\":{\"version\":\"1.2\",\"tiledversion\":\"1.2.0\",\"name\":\"Tilesheet-water\",\"tilewidth\":\"32\",\"tileheight\":\"32\",\"tilecount\":\"64\",\"columns\":\"8\"},\"image\":[{\"$\":{\"source\":\"Tilesheet-water.png\",\"width\":\"256\",\"height\":\"256\"}}]}}","import Input from './input';\r\n//import jsonMap from './map.json';\r\nimport woodTileset from './wood_tileset.tsx';\r\nimport woodTilesetImage from './wood_tileset.png';\r\nimport waterTileset from './Tilesheet-water.tsx';\r\nimport waterTilesetImage from './Tilesheet-water.png';\r\n\r\n/** @class Game\r\n * A class representing the high-level functionality\r\n * of a game - the game loop, buffer swapping, etc.\r\n */\r\nexport default class Game {\r\n    /** @constructor\r\n     * Creates the game instance\r\n     * @param {integer} width - the width of the game screen in pixels\r\n     * @param {integer} heght - the height of the game screen in pixels\r\n     */\r\n    constructor(width, height) {\r\n        this._start = null;\r\n        this.WIDTH = width;\r\n        this.HEIGHT = height;\r\n        this.input = new Input();\r\n        this.entities = [];\r\n\r\n        // Set up the tilemap variables\r\n        this.mapJson = require('./map.json');\r\n        let wood = new Image();\r\n        wood.src = woodTilesetImage;\r\n        let water = new Image();\r\n        water.src = waterTilesetImage;\r\n        this.images = [wood, water];\r\n        this.tilesets = [woodTileset, waterTileset];\r\n\r\n        // Set up the back buffer\r\n        this.backBuffer = document.createElement('canvas');\r\n        this.backBuffer.width = this.WIDTH;\r\n        this.backBuffer.height = this.HEIGHT;\r\n        this.backBufferCtx = this.backBuffer.getContext('2d');\r\n\r\n        this.mapBuffer = document.createElement('canvas');\r\n        this.mapBuffer.width = this.WIDTH;\r\n        this.mapBuffer.height = this.HEIGHT;\r\n        this.mapBufferCtx = this.backBuffer.getContext('2d');\r\n\r\n        // Set up the screen buffer\r\n        this.screenBuffer = document.createElement('canvas');\r\n        this.screenBuffer.width = this.WIDTH;\r\n        this.screenBuffer.height = this.HEIGHT;\r\n        this.screenBufferCtx = this.screenBuffer.getContext('2d');\r\n        document.body.append(this.screenBuffer);\r\n        if (!this._start) {\r\n            this._start = 1;\r\n            this.mapBufferCtx.drawImage(wood, 0, 0);\r\n            /*for (let i = 0; i < this.mapJson.layers.length; i++) {\r\n                let width = parseInt(this.mapJson.layers[i].width);\r\n                let imagewidth = parseInt(this.tilesets[0].tileset.image[0].$.width);\r\n                let size = parseInt(this.tilesets[0].tileset.$.tilewidth);\r\n                //this.tilesets[0].tileset.image[0].$\r\n                // this.tilesets[0].tileset.$\r\n                let self = this;\r\n                this.mapJson.layers[i].data.forEach(function (tile_idx, index) {\r\n                    if (tile_idx == 0) {\r\n                        return;\r\n                    }\r\n                    let img_x, img_y, s_x, s_y;\r\n                    tile_idx--;\r\n                    img_x = (tile_idx % (imagewidth / size)) * size;\r\n                    img_y = ~~(tile_idx / (imagewidth / size)) * size;\r\n                    s_x = (index % width) * size;\r\n                    s_y = ~~(index / width) * size;\r\n                    self.screenBufferCtx.drawImage(self.images[i], img_x, img_y, size, size,\r\n                        s_x, s_y, size, size);\r\n                });\r\n            }*/\r\n        }\r\n        /*this.tilesets.forEach(function (tileset, index) {\r\n            //var tileset = tileset;\r\n            this.mapJson.layers.forEach(function (tile_idx, i) {\r\n                if (tile_idx == 0) {\r\n                    return;\r\n                }\r\n                let img_x, img_y, s_x, s_y;\r\n                tile_idx--;\r\n                img_x = (tile_idx % (tileset.imagewidth / size)) * size;\r\n                img_y = ~~(tile_idx / (tileset.imagewidth / size)) * size;\r\n                s_x = (i % layer.width) * size;\r\n                s_y = ~~(i / layer.width) * size;\r\n                s.drawImage(scene.tileset, img_x, img_y, size, size,\r\n                    s_x, s_y, size, size);\r\n            });\r\n        });\r\n        scene.layers.push(s.canvas.toDataURL());\r\n        c.drawImage(s.canvas, 0, 0);*/\r\n    }\r\n\r\n    /** @method addEntity\r\n     * Adds an entity to the game world\r\n     * Entities should have an update() and render()\r\n     * method.\r\n     * @param {Object} entity - the entity.\r\n     */\r\n    addEntity(entity) {\r\n        this.entities.push(entity);\r\n    }\r\n\r\n    /** @method update\r\n     * Updates the game state\r\n     * @param {integer} elapsedTime - the number of milliseconds per frame\r\n     */\r\n    update(elapsedTime) {\r\n\r\n        // Update game entitites\r\n        this.entities.forEach(entity => entity.update(elapsedTime, this.input));\r\n\r\n        // Swap input buffers\r\n        this.input.update();\r\n    }\r\n\r\n    /** @method render\r\n     * Renders the game state\r\n     * @param {integer} elapsedTime - the number of milliseconds per frame\r\n     */\r\n    render(elapsedTime) {\r\n        // Clear the back buffer\r\n        this.backBufferCtx.fillStyle = \"white\";\r\n        this.backBufferCtx.fillRect(0, 0, this.WIDTH, this.HEIGHT);\r\n        console.log(this.jsonMap);\r\n        console.log(this.tilesets);\r\n\r\n        // TODO: Render game\r\n\r\n        // Render entities\r\n        this.entities.forEach(entity => entity.render(elapsedTime, this.backBufferCtx));\r\n\r\n        // Flip the back buffer\r\n        this.screenBufferCtx.drawImage(this.mapBuffer, 0, 0);\r\n        //this.screenBufferCtx.drawImage(this.backBuffer, 0, 0);\r\n    }\r\n\r\n    /** @method loop\r\n     * Updates and renders the game,\r\n     * and calls itself on the next draw cycle.\r\n     * @param {DOMHighResTimestamp} timestamp - the current system time\r\n     */\r\n    loop(timestamp) {\r\n        var elapsedTime = this._frame_start ? timestamp - this._frame_start : 0;\r\n        this.update(elapsedTime);\r\n        this.render(elapsedTime);\r\n        this._frame_start = timestamp;\r\n        window.requestAnimationFrame((timestamp) => {\r\n            this.loop(timestamp)\r\n        });\r\n    }\r\n}\r\n","import Game from './game';\r\nimport Player from './player';\r\n\r\n// Create the game\r\nvar game = new Game(1024, 768);\r\n\r\n// Create the player and add it to the game\r\ngame.addEntity(new Player(60, 60));\r\n\r\n// Start the main game loop\r\ngame.loop();\r\n","\r\n/** @module Input\r\n  * A class for handling input from the user\r\n  * will work for all keys on the keyboard\r\n  */\r\nexport default class Input {\r\n  /** @constructor\r\n    * Constructs a new instance of the Input class\r\n    * and attaches event listeners to the window.\r\n    */\r\n  constructor() {\r\n    this.oldState = {}\r\n    this.newState = {}\r\n\r\n    window.addEventListener('keydown', (event) => {\r\n      event.preventDefault();\r\n      this.newState[event.key] = true;\r\n    });\r\n\r\n    window.addEventListener('keyup', (event) => {\r\n      event.preventDefault();\r\n      this.newState[event.key] = false;\r\n    });\r\n\r\n  }\r\n\r\n  /** @method update\r\n    * Copies the new state to the old state\r\n    */\r\n  update() {\r\n    this.oldState = JSON.parse(JSON.stringify(this.newState));\r\n  }\r\n\r\n  /** @method keyPressed\r\n    * Returns true if the specified key is\r\n    * currently pressed.\r\n    * @param {String} key - the key to test\r\n    * @return {bool} if the key is pressed\r\n    */\r\n  keyPressed(key) {\r\n    return this.newState[key];\r\n  }\r\n\r\n  /** @method keyDown\r\n    * Returns true if the specified key\r\n    * went down this frame\r\n    * @param {String} key - the key to test\r\n    * @return {bool} if the key is pressed\r\n    */\r\n  keyDown(key) {\r\n    return this.newState[key] && !this.oldState[key];\r\n  }\r\n\r\n  /** @method keyUp\r\n    * Returns true if the specified key\r\n    * went up this frame\r\n    * @param {String} key - the key to test\r\n    * @return {bool} if the key is pressed\r\n    */\r\n  keyUp(key) {\r\n    return !this.newState[key] && this.oldState[key];\r\n  }\r\n}\r\n","/** @module Player\r\n  * A class representing the player.\r\n  */\r\nexport default class Player {\r\n  /** @constructor\r\n    * Constructs a new player instance\r\n    * @param {float} x - the player's x position\r\n    * @param {float} y - the player's y position\r\n    */\r\n  constructor(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  /** @method update\r\n    * Updates the player\r\n    * @param {double} deltaT - the elapsed time\r\n    * @param {Input} input - the input object\r\n    */\r\n  update(deltaT, input) {\r\n    if(input.keyPressed(\"ArrowLeft\")) this.x--;\r\n    if(input.keyPressed(\"ArrowRight\")) this.x++;\r\n    if(input.keyPressed(\"ArrowUp\")) this.y--;\r\n    if(input.keyPressed(\"ArrowDown\")) this.y++;\r\n  }\r\n\r\n  /** @method render\r\n    * Renders the player\r\n    * @param {double} deltaT - elapsed time\r\n    * @param {Context2D} context - the rendering context\r\n    */\r\n  render(deltaT, context) {\r\n    context.fillStyle = \"blue\";\r\n    context.beginPath();\r\n    context.arc(this.x, this.y, 25, 0, 2*Math.PI);\r\n    context.fill();\r\n  }\r\n\r\n}\r\n","module.exports = __webpack_public_path__ + \"2cafb91877cbda9df58aa5693a889f5d.png\";","module.exports = {\"tileset\":{\"$\":{\"version\":\"1.2\",\"tiledversion\":\"1.2.0\",\"name\":\"wood_tileset\",\"tilewidth\":\"32\",\"tileheight\":\"32\",\"tilecount\":\"256\",\"columns\":\"16\"},\"image\":[{\"$\":{\"source\":\"wood_tileset.png\",\"width\":\"512\",\"height\":\"512\"}}]}}"],"sourceRoot":""}